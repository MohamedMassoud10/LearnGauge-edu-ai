const mongoose=require("mongoose"),bcrypt=require("bcryptjs"),slugify=require("slugify"),userSchema=new mongoose.Schema({name:{type:String,trim:!0,required:[!0,"name required"]},slug:{type:String,lowercase:!0},email:{type:String,required:[!0,"email required"],unique:!0,lowercase:!0},studentId:{type:String,unique:!0,sparse:!0},major:{type:String,required:function(){return"student"===this.role}},academicLevel:{type:Number,min:1,max:8,default:1},gpa:{type:Number,min:0,max:4,default:0},completedCreditHours:{type:Number,min:0,default:0},program:String,semester:{type:Number,min:1,max:8,default:1},creditHours:Number,department:String,phone:String,profileImg:String,password:{type:String,required:[!0,"password required"],minlength:[6,"Too short password"],select:!1},passwordChangedAt:Date,passwordResetCode:String,passwordResetExpires:Date,passwordResetVerified:Boolean,role:{type:String,enum:["manager","student","instructor","admin"],default:"admin"},active:{type:Boolean,default:!0},subjects:[String]},{timestamps:!0});userSchema.pre("save",(function(next){this.name&&(this.slug=slugify(this.name,{lower:!0})),next()})),userSchema.pre("save",(async function(next){if(!this.isModified("password"))return next();this.password=await bcrypt.hash(this.password,12),next()}));const User=mongoose.model("User",userSchema);module.exports=User;