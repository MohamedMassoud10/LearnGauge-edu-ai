const express=require("express"),{createFERValidator:createFERValidator,updateFERValidator:updateFERValidator,getFERValidator:getFERValidator,deleteFERValidator:deleteFERValidator}=require("../utils/validators/ferValidator"),{getAllEmotionRecords:getAllEmotionRecords,getEmotionRecord:getEmotionRecord,createEmotionRecord:createEmotionRecord,updateEmotionRecord:updateEmotionRecord,deleteEmotionRecord:deleteEmotionRecord,getEmotionsForLecture:getEmotionsForLecture,getEmotionsForCourse:getEmotionsForCourse,getEmotionsForStudent:getEmotionsForStudent,getLectureEmotionStats:getLectureEmotionStats,bulkCreateEmotions:bulkCreateEmotions}=require("../services/ferService"),authService=require("../services/authService"),router=express.Router({mergeParams:!0});router.use(authService.protect),router.route("/").get(authService.allowedTO("admin","instructor"),getAllEmotionRecords).post(authService.allowedTO("admin","system"),createFERValidator,createEmotionRecord),router.route("/:id").get(getFERValidator,getEmotionRecord).put(authService.allowedTO("admin","system"),updateFERValidator,updateEmotionRecord).delete(authService.allowedTO("admin"),deleteFERValidator,deleteEmotionRecord),router.get("/lectures/:lectureId/emotions",authService.allowedTO("admin","instructor"),getEmotionsForLecture),router.get("/lectures/:lectureId/emotion-stats",authService.allowedTO("admin","instructor"),getLectureEmotionStats),router.post("/lectures/:lectureId/bulk-emotions",authService.allowedTO("admin","system"),bulkCreateEmotions),router.get("/courses/:courseId/emotions",authService.allowedTO("admin","instructor"),getEmotionsForCourse),router.get("/students/:studentId/emotions",authService.allowedTO("admin","instructor","student"),getEmotionsForStudent),module.exports=router;